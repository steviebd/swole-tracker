name: Deploy

on:
  push:
    branches:
      - "**"
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    env:
      DEPLOY_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      CI: true
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      D1_DB_ID: ${{ secrets.D1_DB_ID }}
      WORKOS_CLIENT_ID: ${{ secrets.WORKOS_CLIENT_ID }}
      WORKOS_API_KEY: ${{ secrets.WORKOS_API_KEY }}
      WORKOS_REDIRECT_URI: ${{ secrets.WORKOS_REDIRECT_URI }}
      WORKOS_COOKIE_PASSWORD: ${{ secrets.WORKOS_COOKIE_PASSWORD }}
      WORKER_SESSION_SECRET: ${{ secrets.WORKER_SESSION_SECRET }}
      ENCRYPTION_MASTER_KEY: ${{ secrets.ENCRYPTION_MASTER_KEY }}
      WHOOP_CLIENT_ID: ${{ secrets.WHOOP_CLIENT_ID }}
      WHOOP_CLIENT_SECRET: ${{ secrets.WHOOP_CLIENT_SECRET }}
      WHOOP_REDIRECT_URI: ${{ secrets.WHOOP_REDIRECT_URI }}
      WHOOP_WEBHOOK_SECRET: ${{ secrets.WHOOP_WEBHOOK_SECRET }}
      WHOOP_SYNC_RATE_LIMIT_PER_HOUR: ${{ secrets.WHOOP_SYNC_RATE_LIMIT_PER_HOUR }}
      AI_GATEWAY_API_KEY: ${{ secrets.AI_GATEWAY_API_KEY }}
      AI_GATEWAY_MODEL: ${{ secrets.AI_GATEWAY_MODEL }}
      AI_GATEWAY_PROMPT: ${{ secrets.AI_GATEWAY_PROMPT }}
      AI_GATEWAY_JOKE_MEMORY_NUMBER: ${{ secrets.AI_GATEWAY_JOKE_MEMORY_NUMBER }}
      AI_GATEWAY_MODEL_HEALTH: ${{ secrets.AI_GATEWAY_MODEL_HEALTH }}
      AI_DEBRIEF_MODEL: ${{ secrets.AI_DEBRIEF_MODEL }}
      AI_DEBRIEF_TEMPERATURE: ${{ secrets.AI_DEBRIEF_TEMPERATURE }}
      VERCEL_AI_GATEWAY_API_KEY: ${{ secrets.VERCEL_AI_GATEWAY_API_KEY }}
      NEXT_PUBLIC_POSTHOG_KEY: ${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}
      NEXT_PUBLIC_POSTHOG_HOST: ${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}
      NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
      RATE_LIMIT_TEMPLATE_OPERATIONS_PER_HOUR: ${{ secrets.RATE_LIMIT_TEMPLATE_OPERATIONS_PER_HOUR }}
      RATE_LIMIT_WORKOUT_OPERATIONS_PER_HOUR: ${{ secrets.RATE_LIMIT_WORKOUT_OPERATIONS_PER_HOUR }}
      RATE_LIMIT_API_CALLS_PER_MINUTE: ${{ secrets.RATE_LIMIT_API_CALLS_PER_MINUTE }}
      RATE_LIMIT_ENABLED: ${{ secrets.RATE_LIMIT_ENABLED }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: "1.2.21"

      - name: Restore Bun cache
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run checks
        run: bun run check

      - name: Run tests
        run: bun test

  deploy:
    name: Deploy (${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }})
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    env:
      DEPLOY_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      CI: true
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      D1_DB_ID: ${{ secrets.D1_DB_ID }}
      WORKOS_CLIENT_ID: ${{ secrets.WORKOS_CLIENT_ID }}
      WORKOS_API_KEY: ${{ secrets.WORKOS_API_KEY }}
      WORKOS_REDIRECT_URI: ${{ secrets.WORKOS_REDIRECT_URI }}
      WORKOS_COOKIE_PASSWORD: ${{ secrets.WORKOS_COOKIE_PASSWORD }}
      WORKER_SESSION_SECRET: ${{ secrets.WORKER_SESSION_SECRET }}
      ENCRYPTION_MASTER_KEY: ${{ secrets.ENCRYPTION_MASTER_KEY }}
      WHOOP_CLIENT_ID: ${{ secrets.WHOOP_CLIENT_ID }}
      WHOOP_CLIENT_SECRET: ${{ secrets.WHOOP_CLIENT_SECRET }}
      WHOOP_REDIRECT_URI: ${{ secrets.WHOOP_REDIRECT_URI }}
      WHOOP_WEBHOOK_SECRET: ${{ secrets.WHOOP_WEBHOOK_SECRET }}
      WHOOP_SYNC_RATE_LIMIT_PER_HOUR: ${{ secrets.WHOOP_SYNC_RATE_LIMIT_PER_HOUR }}
      AI_GATEWAY_API_KEY: ${{ secrets.AI_GATEWAY_API_KEY }}
      AI_GATEWAY_MODEL: ${{ secrets.AI_GATEWAY_MODEL }}
      AI_GATEWAY_PROMPT: ${{ secrets.AI_GATEWAY_PROMPT }}
      AI_GATEWAY_JOKE_MEMORY_NUMBER: ${{ secrets.AI_GATEWAY_JOKE_MEMORY_NUMBER }}
      AI_GATEWAY_MODEL_HEALTH: ${{ secrets.AI_GATEWAY_MODEL_HEALTH }}
      AI_DEBRIEF_MODEL: ${{ secrets.AI_DEBRIEF_MODEL }}
      AI_DEBRIEF_TEMPERATURE: ${{ secrets.AI_DEBRIEF_TEMPERATURE }}
      VERCEL_AI_GATEWAY_API_KEY: ${{ secrets.VERCEL_AI_GATEWAY_API_KEY }}
      NEXT_PUBLIC_POSTHOG_KEY: ${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}
      NEXT_PUBLIC_POSTHOG_HOST: ${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}
      NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
      RATE_LIMIT_TEMPLATE_OPERATIONS_PER_HOUR: ${{ secrets.RATE_LIMIT_TEMPLATE_OPERATIONS_PER_HOUR }}
      RATE_LIMIT_WORKOUT_OPERATIONS_PER_HOUR: ${{ secrets.RATE_LIMIT_WORKOUT_OPERATIONS_PER_HOUR }}
      RATE_LIMIT_API_CALLS_PER_MINUTE: ${{ secrets.RATE_LIMIT_API_CALLS_PER_MINUTE }}
      RATE_LIMIT_ENABLED: ${{ secrets.RATE_LIMIT_ENABLED }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: "1.2.21"

      - name: Restore Bun cache
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate wrangler.toml
        run: ./scripts/update-wrangler-config.sh "$DEPLOY_ENV"

      - name: Build application
        run: bun run build

      - name: Ensure offline queue exists
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: ./scripts/ensure-cloudflare-queue.sh "$DEPLOY_ENV"

      - name: Deploy to Cloudflare
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env ${{ env.DEPLOY_ENV }} --config wrangler.toml
